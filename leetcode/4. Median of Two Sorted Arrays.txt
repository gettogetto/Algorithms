/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/
class Solution {
public:
    int getkth(int s[], int m, int l[], int n, int k){
        // let m <= n
        if (m > n) 
            return getkth(l, n, s, m, k);
        if (m == 0)
            return l[k - 1];
        if (k == 1)
            return min(s[0], l[0]);

        int i = min(m, k / 2), j = k-i;
        if (s[i - 1] > l[j - 1])
            return getkth(s, m, l + j, n - j, k - j);
        else
            return getkth(s + i, m - i, l, n, k - i);
        return 0;
    }
    
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        int l = (m + n + 1) >> 1;
        int r = (m + n + 2) >> 1;
        return (getkth(A, m ,B, n, l) + getkth(A, m, B, n, r)) / 2.0;
    }
};
//vector版本

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size();
        int n=nums2.size();
        int k1=(m+n+1)/2;
        int k2=(m+n+2)/2;
        return (findkth(nums1,0,m,nums2,0,n,k1)+findkth(nums1,0,m,nums2,0,n,k2))/2.0;
    }
    double findkth(vector<int>& nums1,int s1, int m, vector<int>& nums2,int s2,int n,int k){//s1开始下标，m，数组长度
        
        if(m>n) return findkth(nums2,s2,n,nums1,s1,m,k);
        if(m==0) return nums2[s2+k-1];
        if(n==0) return nums1[s1+k-1];
        if(k==1) return min(nums1[s1],nums2[s2]);
        int i=min(m,k/2);
        int j=k-i;
        if(nums1[s1+i-1]>nums2[s2+j-1]){

            return findkth(nums1,s1,m,nums2,s2+j,n-j,k-j);
        }else{

            return findkth(nums1,s1+i,m-i,nums2,s2,n,k-i);
        }
        
        return 0;
        
    }
};
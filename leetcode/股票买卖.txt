121. Best Time to Buy and Sell Stock
只交易一次
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        if (prices.empty()) return 0;
        int res = 0;
        int minp = prices[0];
        for (int i = 1; i < prices.size(); ++i) {
            res = max(res, prices[i] - minp);
            minp = min(minp, prices[i]);
        }
        return res;
    }
};
122. Best Time to Buy and Sell Stock II
//不限制交易次数
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int size=prices.size();
        int sum=0;
        for(int i=1;i<size;i++){
            if(prices[i]-prices[i-1]>0) sum+=prices[i]-prices[i-1];
        }
        return sum;
    }
};
123. Best Time to Buy and Sell Stock III
//两次交易
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size();
        if (n < 2) return 0;
        int sell1 = 0, sell2 = 0, buy1 = INT_MIN, buy2 = INT_MIN;
        for(int i = 0; i < n; i++) {
            buy1 = max(buy1, -prices[i]);
            sell1 = max(sell1, buy1 + prices[i]);
            buy2 = max(buy2, sell1 - prices[i]);
            sell2 = max(sell2, buy2 + prices[i]);
        }
        return sell2;
    }
}; 
188. Best Time to Buy and Sell Stock IV
//k次交易
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        if(k==0||n<2) return 0;
        if(k>n/2){
            int res=0;
            for(int i=1;i<n;i++){
                if(prices[i]-prices[i-1]>0){
                    res+=prices[i]-prices[i-1];
                }
            }
            return res;
        }
        vector<int>buy(k,INT_MIN);
        vector<int>sell(k,0);
        for(int i=0;i<n;i++){
            buy[0]=max(buy[0],-prices[i]);
            sell[0]=max(sell[0],buy[0]+prices[i]);
            for(int j=1;j<k;j++){
                buy[j]=max(buy[j],sell[j-1]-prices[i]);
                sell[j]=max(sell[j],buy[j]+prices[i]);
            }
        }
        return sell[k-1];
    }
};
309. Best Time to Buy and Sell Stock with Cooldown
//卖一次至少歇一天
class Solution {
public:
int maxProfit(vector<int> &prices) {
    int buy(INT_MIN), sell(0), prev_sell(0), prev_buy;
    for (int i=0;i<prices.size();i++) {
        prev_buy = buy;
        buy = max(prev_sell - prices[i], buy);
        prev_sell = sell;
        sell = max(prev_buy + prices[i], sell);
    }
    return sell;
}
};
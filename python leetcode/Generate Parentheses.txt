Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        res=[]
        self.dfs(res,'',n,0)#n表示可用的左括号
        return res
    def dfs(self,res,path,n,m):
        if n==0 and m==0:
            res.append(path)
            return 
        if n>0: self.dfs(res,path+'(',n-1,m+1)#每加一个左括号使得一个右括号可用
        if m>0: self.dfs(res,path+')',n,m-1)
        
        
        
        
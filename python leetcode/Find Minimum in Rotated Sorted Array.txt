Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.
You may assume no duplicate exists in the array.


class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left=0
        right=len(nums)-1
        while left<right:
            if nums[left]<nums[right]:
                return nums[left]
            mid=(left+right)/2
            if nums[mid]>=nums[left]:
                left=mid+1
            else:
                right=mid
        return nums[left]


Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.
The array may contain duplicates.

class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left=0
        right=len(nums)-1
        while left<right:
            if nums[left]<nums[right]:
                return nums[left]
            mid=(left+right)/2
            if nums[mid]>nums[left]:
                left=mid+1
            elif nums[mid]<nums[left]:
                right=mid
            else:
                left=left+1
        return nums[left]

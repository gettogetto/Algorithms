git是一种分布式代码管理工具，git通过树的形式记录文件的更改历史，比如： base'<--base<--A<--A' ^ | --- B<--B' 小米工程师常常需要寻找两个分支最近的分割点，即base.假设git 树是多叉树，请实现一个算法，计算git树上任意两点的最近分割点。 （假设git树节点数为n,用邻接矩阵的形式表示git树：字符串数组matrix包含n个字符串，每个字符串由字符'0'或'1'组成，长度为n。matrix[i][j]=='1'当且仅当git树种第i个和第j个节点有连接。节点0为git树的根节点。）

输入例子：
 [01011,10100,01000,10000,10000],1,2
输出例子：
 1

class Solution {  
public:  

    int getSplitNode(vector<string> matrix, int indexA, int indexB) {  
        // n,表示节点个数  
        int n = matrix.size();  
        // ge,用于存储与每个节点存在链接关系的节点的index，由于每个节点可以都  
        // 多个子节点（多叉树），所以用vector<vector<int> >的结构  
        // 存储  
        vector<vector<int> > ge(n);  
        // dep,用于存储n个节点的深度,初始化为-1  
        vector<int> dep(n, -1);  
        // fa,用于存储n个节点对应的父节点的index，初始化为-1，  
        // 由于每个节点只有一个父节点，所以用vector<int>的形式表示  
        vector<int> fa(n, -1);  
        //初始化邻接矩阵  
        for(int i = 0; i < n; i++) {  
            for (int j = 0; j < n; j++) {  
                if (matrix[i][j] == '1') {  
                    ge[i].push_back(j);  
                    //ge[j].push_back(i);  
                }  
            }  
        }  
        // 用于广度遍历此多叉树,这里是类似栈的结构  
        queue<int> stk;  
        // 存入根节点  
        stk.push(0);  
        // 根节点的深度置为0  
        dep[0] = 0; 
        fa[0]=0;
        // 类似广度遍历此多叉树  
        while (!stk.empty()) {  
            // 取栈顶元素  
            int u = stk.front();  
            // 删除栈顶元素  
            stk.pop();  
            // 遍历所有与u相邻的点  
            for (int k = 0; k < ge[u].size(); k++) {  
                int v = ge[u][k];  
                // 表示v已经访问过了  
                if (fa[v] != -1) {  
                    continue;  
                }  
                // v的父节点是u  
                fa[v] = u;  
                // v的深度为其父节点深度+1  
                dep[v] = dep[u] + 1;  
                // 将v入栈  
                stk.push(v);  
            }  
        }  
        // 寻找a和b的最近分割点  
        int a = indexA, b = indexB;  
        // 将a和b回溯到相同高度  
        while(dep[a] > dep[b]) {  
            a = fa[a];  
        }  
        while(dep[a] < dep[b]) {  
            b = fa[b];  
        }  
        // 寻找最近分割点  
        while(a != b) {  
            a = fa[a];  
            b = fa[b];  
        }  
        return a;  
    }  
};  

//法二

#define MAX 1000
class Solution {
    public:
    int p[MAX];
    int d[MAX];
    int getSplitNode(vector<string> matrix, int indexA, int indexB) {
        for(int i=0;i<MAX;i++){
            p[i] = -1;
            d[i] = -1;
        }
        dfs(matrix,0,0,0);
        while(d[indexA]>d[indexB])
        {
            indexA=p[indexA];
        }
        while(d[indexA]<d[indexB])
        {
            indexB=p[indexB];
        }
        while(indexA!=indexB)
        {
            indexA=p[indexA];
            indexB=p[indexB];
        }
        return indexA;
    }
    int dfs(vector<string> matrix, int r, int p, int d){
        if(this->p[r] != -1) return 0;
        this->p[r] = p;
        this->d[r] = d;
        for(int i=0; i<matrix.size() ;i++)
        {
            if(matrix[r][i] == '1'){
	dfs(matrix, i, r, d+1);
            }
        }
         return 0;
       }
};
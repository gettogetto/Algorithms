牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列是非递增或者非递减排序的。牛牛有一个长度为n的整数数组A,他现在有一个任务是把数组A分为若干段排序子序列,牛牛想知道他最少可以把这个数组分为几段排序子序列.
如样例所示,牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,至少需要划分为2个排序子序列,所以输出2 
输入描述:
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)

第二行包括n个整数A_i(1 ≤ A_i ≤ 10^9),表示数组A的每个数字。


输出描述:
输出一个整数表示牛牛可以将A最少划分为多少段排序子序列

输入例子:
6
1 2 3 2 2 1

输出例子:
2

#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin>>n;
    vector<int>v(n);
    int flag=0;
    int count=0;
    for(auto &i:v) cin>>i;
    for(int i=1;i<n;i++){
        if(flag==0){
            if(v[i]>v[i-1]) flag=1;
            else if(v[i]<v[i-1]) flag=-1;
        }else if(flag==1){
			if(v[i]<v[i-1]){
                count++;
                flag=0;
            }
        }else{
            if(v[i]>v[i-1]){
                count++;
                flag=0;  
            }
        }
    }
    cout<<count+1;
}
}
===============
牛牛的数列
时间限制：1秒
空间限制：32768K
牛牛现在有一个n个数组成的数列,牛牛现在想取一个连续的子序列,并且这个子序列还必须得满足:最多只改变一个数,就可以使得这个连续的子序列是一个严格上升的子序列,牛牛想知道这个连续子序列最长的长度是多少。 
输入描述:
输入包括两行,第一行包括一个整数n(1 ≤ n ≤ 10^5),即数列的长度;
第二行n个整数a_i, 表示数列中的每个数(1 ≤ a_i ≤ 10^9),以空格分割。


输出描述:
输出一个整数,表示最长的长度。

输入例子:
6 
7 2 3 1 5 6

输出例子:
5

#include<bits/stdc++.h>
using namespace std;
vector<int> v(10e5+5);
vector<int> foward(10e5+5,0),backward(10e5+5,0);//放main里面 内存不够
int main(){
    int n;
    cin>>n;  
    for(auto i=1;i<=n;i++) cin>>v[i];
    v[0]=INT_MIN;
    v[n+1]=INT_MAX;
    for(int i=1;i<=n;i++){
        v[i]>v[i-1]?foward[i]=foward[i-1]+1:foward[i]=1;
    }
    for(int i=n;i>=1;i--){
        v[i]<v[i+1]?backward[i]=backward[i+1]+1:backward[i]=1;
    }
    int ans=0;
    for(int i=1;i<=n;i++){
        ans=max(ans,foward[i]);
        ans=max(ans,backward[i]);
        if(i+2<=n&&v[i+2]-v[i]>=2) ans=max(ans,foward[i]+backward[i+2]+1);
    }
    cout<<ans;
}